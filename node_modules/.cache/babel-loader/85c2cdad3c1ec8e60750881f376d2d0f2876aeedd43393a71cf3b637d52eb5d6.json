{"ast":null,"code":"import React,{useState,useEffect}from'react';import LetterTile from'./LetterTile';import LetterSlot from'./LetterSlot';import'./GameBoard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function GameBoard(_ref){let{word,scrambledLetters,onCorrectWord}=_ref;const[slots,setSlots]=useState([]);const[tiles,setTiles]=useState([]);const[selectedTile,setSelectedTile]=useState(null);// Initialize slots and tiles when word changes\nuseEffect(()=>{if(word){// Create empty slots for each letter in the word\nsetSlots(Array.from({length:word.length},(_,i)=>({id:`slot-${i}`,position:i,letter:null,tileId:null})));// Set up letter tiles\nsetTiles(scrambledLetters);}},[word,scrambledLetters]);// Select a tile for placement\nconst handleTileClick=tileId=>{const tileIndex=tiles.findIndex(t=>t.id===tileId);if(tileIndex!==-1&&!tiles[tileIndex].isUsed){setSelectedTile(tileId);}};// Place a tile in a slot\nconst handleSlotClick=slotId=>{if(!selectedTile)return;const slotIndex=slots.findIndex(s=>s.id===slotId);// Only allow placement in empty slots\nif(slotIndex!==-1&&slots[slotIndex].tileId===null){// Find the tile\nconst tileIndex=tiles.findIndex(t=>t.id===selectedTile);// Update slots with the placed tile\nconst newSlots=[...slots];newSlots[slotIndex]={...newSlots[slotIndex],letter:tiles[tileIndex].letter,tileId:selectedTile};setSlots(newSlots);// Mark the tile as used\nconst newTiles=[...tiles];newTiles[tileIndex]={...newTiles[tileIndex],isUsed:true};setTiles(newTiles);// Clear selection\nsetSelectedTile(null);// Check if word is complete\ncheckWordCompletion(newSlots);}};// Remove a tile from a slot\nconst handleSlotReset=slotId=>{const slotIndex=slots.findIndex(s=>s.id===slotId);if(slotIndex!==-1&&slots[slotIndex].tileId){const tileId=slots[slotIndex].tileId;// Clear the slot\nconst newSlots=[...slots];newSlots[slotIndex]={...newSlots[slotIndex],letter:null,tileId:null};setSlots(newSlots);// Mark the tile as available again\nconst tileIndex=tiles.findIndex(t=>t.id===tileId);const newTiles=[...tiles];newTiles[tileIndex]={...newTiles[tileIndex],isUsed:false};setTiles(newTiles);}};// Check if the word is correctly formed\nconst checkWordCompletion=currentSlots=>{// Check if all slots are filled\nconst isComplete=currentSlots.every(slot=>slot.letter!==null);if(isComplete){// Build the word from slot letters\nconst formedWord=currentSlots.map(slot=>slot.letter).join('');// Check if it matches the target word\nif(formedWord===word){// Word is correct!\nonCorrectWord();}else{// Word is incorrect\nalert(\"That's not quite right. Try rearranging the letters!\");}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-board\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"word-slots\",children:slots.map(slot=>/*#__PURE__*/_jsx(LetterSlot,{id:slot.id,letter:slot.letter,onClick:()=>slot.letter?handleSlotReset(slot.id):handleSlotClick(slot.id)},slot.id))}),/*#__PURE__*/_jsx(\"div\",{className:\"letter-tiles\",children:tiles.map(tile=>/*#__PURE__*/_jsx(LetterTile,{id:tile.id,letter:tile.letter,isUsed:tile.isUsed,isSelected:selectedTile===tile.id,onClick:()=>handleTileClick(tile.id)},tile.id))}),/*#__PURE__*/_jsx(\"button\",{className:\"check-button\",onClick:()=>checkWordCompletion(slots),children:\"Check Word\"})]});}export default GameBoard;","map":{"version":3,"names":["React","useState","useEffect","LetterTile","LetterSlot","jsx","_jsx","jsxs","_jsxs","GameBoard","_ref","word","scrambledLetters","onCorrectWord","slots","setSlots","tiles","setTiles","selectedTile","setSelectedTile","Array","from","length","_","i","id","position","letter","tileId","handleTileClick","tileIndex","findIndex","t","isUsed","handleSlotClick","slotId","slotIndex","s","newSlots","newTiles","checkWordCompletion","handleSlotReset","currentSlots","isComplete","every","slot","formedWord","map","join","alert","className","children","onClick","tile","isSelected"],"sources":["/Users/peterpressman/Desktop/word-scramble-game/src/components/GameBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LetterTile from './LetterTile';\nimport LetterSlot from './LetterSlot';\nimport './GameBoard.css';\n\nfunction GameBoard({ word, scrambledLetters, onCorrectWord }) {\n  const [slots, setSlots] = useState([]);\n  const [tiles, setTiles] = useState([]);\n  const [selectedTile, setSelectedTile] = useState(null);\n  \n  // Initialize slots and tiles when word changes\n  useEffect(() => {\n    if (word) {\n      // Create empty slots for each letter in the word\n      setSlots(Array.from({ length: word.length }, (_, i) => ({\n        id: `slot-${i}`,\n        position: i,\n        letter: null,\n        tileId: null\n      })));\n      \n      // Set up letter tiles\n      setTiles(scrambledLetters);\n    }\n  }, [word, scrambledLetters]);\n  \n  // Select a tile for placement\n  const handleTileClick = (tileId) => {\n    const tileIndex = tiles.findIndex(t => t.id === tileId);\n    if (tileIndex !== -1 && !tiles[tileIndex].isUsed) {\n      setSelectedTile(tileId);\n    }\n  };\n  \n  // Place a tile in a slot\n  const handleSlotClick = (slotId) => {\n    if (!selectedTile) return;\n    \n    const slotIndex = slots.findIndex(s => s.id === slotId);\n    \n    // Only allow placement in empty slots\n    if (slotIndex !== -1 && slots[slotIndex].tileId === null) {\n      // Find the tile\n      const tileIndex = tiles.findIndex(t => t.id === selectedTile);\n      \n      // Update slots with the placed tile\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: tiles[tileIndex].letter,\n        tileId: selectedTile\n      };\n      setSlots(newSlots);\n      \n      // Mark the tile as used\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: true\n      };\n      setTiles(newTiles);\n      \n      // Clear selection\n      setSelectedTile(null);\n      \n      // Check if word is complete\n      checkWordCompletion(newSlots);\n    }\n  };\n  \n  // Remove a tile from a slot\n  const handleSlotReset = (slotId) => {\n    const slotIndex = slots.findIndex(s => s.id === slotId);\n    if (slotIndex !== -1 && slots[slotIndex].tileId) {\n      const tileId = slots[slotIndex].tileId;\n      \n      // Clear the slot\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: null,\n        tileId: null\n      };\n      setSlots(newSlots);\n      \n      // Mark the tile as available again\n      const tileIndex = tiles.findIndex(t => t.id === tileId);\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: false\n      };\n      setTiles(newTiles);\n    }\n  };\n  \n  // Check if the word is correctly formed\n  const checkWordCompletion = (currentSlots) => {\n    // Check if all slots are filled\n    const isComplete = currentSlots.every(slot => slot.letter !== null);\n    \n    if (isComplete) {\n      // Build the word from slot letters\n      const formedWord = currentSlots.map(slot => slot.letter).join('');\n      \n      // Check if it matches the target word\n      if (formedWord === word) {\n        // Word is correct!\n        onCorrectWord();\n      } else {\n        // Word is incorrect\n        alert(\"That's not quite right. Try rearranging the letters!\");\n      }\n    }\n  };\n  \n  return (\n    <div className=\"game-board\">\n      <div className=\"word-slots\">\n        {slots.map(slot => (\n          <LetterSlot\n            key={slot.id}\n            id={slot.id}\n            letter={slot.letter}\n            onClick={() => slot.letter ? handleSlotReset(slot.id) : handleSlotClick(slot.id)}\n          />\n        ))}\n      </div>\n      \n      <div className=\"letter-tiles\">\n        {tiles.map(tile => (\n          <LetterTile\n            key={tile.id}\n            id={tile.id}\n            letter={tile.letter}\n            isUsed={tile.isUsed}\n            isSelected={selectedTile === tile.id}\n            onClick={() => handleTileClick(tile.id)}\n          />\n        ))}\n      </div>\n      \n      <button \n        className=\"check-button\"\n        onClick={() => checkWordCompletion(slots)}\n      >\n        Check Word\n      </button>\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/peterpressman/Desktop/word-scramble-game/src/components/GameBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LetterTile from './LetterTile';\nimport LetterSlot from './LetterSlot';\nimport './GameBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameBoard({\n  word,\n  scrambledLetters,\n  onCorrectWord\n}) {\n  _s();\n  const [slots, setSlots] = useState([]);\n  const [tiles, setTiles] = useState([]);\n  const [selectedTile, setSelectedTile] = useState(null);\n\n  // Initialize slots and tiles when word changes\n  useEffect(() => {\n    if (word) {\n      // Create empty slots for each letter in the word\n      setSlots(Array.from({\n        length: word.length\n      }, (_, i) => ({\n        id: `slot-${i}`,\n        position: i,\n        letter: null,\n        tileId: null\n      })));\n\n      // Set up letter tiles\n      setTiles(scrambledLetters);\n    }\n  }, [word, scrambledLetters]);\n\n  // Select a tile for placement\n  const handleTileClick = tileId => {\n    const tileIndex = tiles.findIndex(t => t.id === tileId);\n    if (tileIndex !== -1 && !tiles[tileIndex].isUsed) {\n      setSelectedTile(tileId);\n    }\n  };\n\n  // Place a tile in a slot\n  const handleSlotClick = slotId => {\n    if (!selectedTile) return;\n    const slotIndex = slots.findIndex(s => s.id === slotId);\n\n    // Only allow placement in empty slots\n    if (slotIndex !== -1 && slots[slotIndex].tileId === null) {\n      // Find the tile\n      const tileIndex = tiles.findIndex(t => t.id === selectedTile);\n\n      // Update slots with the placed tile\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: tiles[tileIndex].letter,\n        tileId: selectedTile\n      };\n      setSlots(newSlots);\n\n      // Mark the tile as used\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: true\n      };\n      setTiles(newTiles);\n\n      // Clear selection\n      setSelectedTile(null);\n\n      // Check if word is complete\n      checkWordCompletion(newSlots);\n    }\n  };\n\n  // Remove a tile from a slot\n  const handleSlotReset = slotId => {\n    const slotIndex = slots.findIndex(s => s.id === slotId);\n    if (slotIndex !== -1 && slots[slotIndex].tileId) {\n      const tileId = slots[slotIndex].tileId;\n\n      // Clear the slot\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: null,\n        tileId: null\n      };\n      setSlots(newSlots);\n\n      // Mark the tile as available again\n      const tileIndex = tiles.findIndex(t => t.id === tileId);\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: false\n      };\n      setTiles(newTiles);\n    }\n  };\n\n  // Check if the word is correctly formed\n  const checkWordCompletion = currentSlots => {\n    // Check if all slots are filled\n    const isComplete = currentSlots.every(slot => slot.letter !== null);\n    if (isComplete) {\n      // Build the word from slot letters\n      const formedWord = currentSlots.map(slot => slot.letter).join('');\n\n      // Check if it matches the target word\n      if (formedWord === word) {\n        // Word is correct!\n        onCorrectWord();\n      } else {\n        // Word is incorrect\n        alert(\"That's not quite right. Try rearranging the letters!\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-slots\",\n      children: slots.map(slot => /*#__PURE__*/_jsxDEV(LetterSlot, {\n        id: slot.id,\n        letter: slot.letter,\n        onClick: () => slot.letter ? handleSlotReset(slot.id) : handleSlotClick(slot.id)\n      }, slot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letter-tiles\",\n      children: tiles.map(tile => /*#__PURE__*/_jsxDEV(LetterTile, {\n        id: tile.id,\n        letter: tile.letter,\n        isUsed: tile.isUsed,\n        isSelected: selectedTile === tile.id,\n        onClick: () => handleTileClick(tile.id)\n      }, tile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-button\",\n      onClick: () => checkWordCompletion(slots),\n      children: \"Check Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"AWUEpVvXAP2WSDwP835PXkzdqAI=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","LetterTile","LetterSlot","jsxDEV","_jsxDEV","GameBoard","word","scrambledLetters","onCorrectWord","_s","slots","setSlots","tiles","setTiles","selectedTile","setSelectedTile","Array","from","length","_","i","id","position","letter","tileId","handleTileClick","tileIndex","findIndex","t","isUsed","handleSlotClick","slotId","slotIndex","s","newSlots","newTiles","checkWordCompletion","handleSlotReset","currentSlots","isComplete","every","slot","formedWord","map","join","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","tile","isSelected","_c","$RefreshReg$"],"sources":["/Users/peterpressman/Desktop/word-scramble-game/src/components/GameBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LetterTile from './LetterTile';\nimport LetterSlot from './LetterSlot';\nimport './GameBoard.css';\n\nfunction GameBoard({ word, scrambledLetters, onCorrectWord }) {\n  const [slots, setSlots] = useState([]);\n  const [tiles, setTiles] = useState([]);\n  const [selectedTile, setSelectedTile] = useState(null);\n  \n  // Initialize slots and tiles when word changes\n  useEffect(() => {\n    if (word) {\n      // Create empty slots for each letter in the word\n      setSlots(Array.from({ length: word.length }, (_, i) => ({\n        id: `slot-${i}`,\n        position: i,\n        letter: null,\n        tileId: null\n      })));\n      \n      // Set up letter tiles\n      setTiles(scrambledLetters);\n    }\n  }, [word, scrambledLetters]);\n  \n  // Select a tile for placement\n  const handleTileClick = (tileId) => {\n    const tileIndex = tiles.findIndex(t => t.id === tileId);\n    if (tileIndex !== -1 && !tiles[tileIndex].isUsed) {\n      setSelectedTile(tileId);\n    }\n  };\n  \n  // Place a tile in a slot\n  const handleSlotClick = (slotId) => {\n    if (!selectedTile) return;\n    \n    const slotIndex = slots.findIndex(s => s.id === slotId);\n    \n    // Only allow placement in empty slots\n    if (slotIndex !== -1 && slots[slotIndex].tileId === null) {\n      // Find the tile\n      const tileIndex = tiles.findIndex(t => t.id === selectedTile);\n      \n      // Update slots with the placed tile\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: tiles[tileIndex].letter,\n        tileId: selectedTile\n      };\n      setSlots(newSlots);\n      \n      // Mark the tile as used\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: true\n      };\n      setTiles(newTiles);\n      \n      // Clear selection\n      setSelectedTile(null);\n      \n      // Check if word is complete\n      checkWordCompletion(newSlots);\n    }\n  };\n  \n  // Remove a tile from a slot\n  const handleSlotReset = (slotId) => {\n    const slotIndex = slots.findIndex(s => s.id === slotId);\n    if (slotIndex !== -1 && slots[slotIndex].tileId) {\n      const tileId = slots[slotIndex].tileId;\n      \n      // Clear the slot\n      const newSlots = [...slots];\n      newSlots[slotIndex] = {\n        ...newSlots[slotIndex],\n        letter: null,\n        tileId: null\n      };\n      setSlots(newSlots);\n      \n      // Mark the tile as available again\n      const tileIndex = tiles.findIndex(t => t.id === tileId);\n      const newTiles = [...tiles];\n      newTiles[tileIndex] = {\n        ...newTiles[tileIndex],\n        isUsed: false\n      };\n      setTiles(newTiles);\n    }\n  };\n  \n  // Check if the word is correctly formed\n  const checkWordCompletion = (currentSlots) => {\n    // Check if all slots are filled\n    const isComplete = currentSlots.every(slot => slot.letter !== null);\n    \n    if (isComplete) {\n      // Build the word from slot letters\n      const formedWord = currentSlots.map(slot => slot.letter).join('');\n      \n      // Check if it matches the target word\n      if (formedWord === word) {\n        // Word is correct!\n        onCorrectWord();\n      } else {\n        // Word is incorrect\n        alert(\"That's not quite right. Try rearranging the letters!\");\n      }\n    }\n  };\n  \n  return (\n    <div className=\"game-board\">\n      <div className=\"word-slots\">\n        {slots.map(slot => (\n          <LetterSlot\n            key={slot.id}\n            id={slot.id}\n            letter={slot.letter}\n            onClick={() => slot.letter ? handleSlotReset(slot.id) : handleSlotClick(slot.id)}\n          />\n        ))}\n      </div>\n      \n      <div className=\"letter-tiles\">\n        {tiles.map(tile => (\n          <LetterTile\n            key={tile.id}\n            id={tile.id}\n            letter={tile.letter}\n            isUsed={tile.isUsed}\n            isSelected={selectedTile === tile.id}\n            onClick={() => handleTileClick(tile.id)}\n          />\n        ))}\n      </div>\n      \n      <button \n        className=\"check-button\"\n        onClick={() => checkWordCompletion(slots)}\n      >\n        Check Word\n      </button>\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}